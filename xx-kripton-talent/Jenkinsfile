 pipeline {
   agent any
   environment {
     dockerCredentials = credentials('dockerhub')
     configImageName = "configuration-service"
     registryCredentials = "nexusCreds"
     registry = "127.0.0.1:8087/"
   }
   stages {
     stage('gitlab') {
       steps {
         git branch: 'dev', credentialsId: 'gitlab-creds', url: 'https://gitlab.com/AlaaBenFradj/kripton-talent.git'

       }
     }
     stage('keycloak-broker') {
       steps {
         bat 'docker-compose up -d keycloak broker sonarqube nexus '
       }
     }
     stage('clean') {
       steps {
         script {
           def modules = ['configuration-service', 'candidate-service', 'job-service', 'qualification-service', 'communication-service', 'user-service', 'api-gateway-service', 'registry-service']
           for (module in modules) {
             dir(module) {
               bat '''

               ./mvnw clean

                 '''
             }
           }
         }
       }
     }
     stage('config-service') {
       steps {
         powershell '''
            cd configuration-service
           ./mvnw package
           docker build -t configuration-service .
           '''
            bat '''
            docker run -d -p 8090:8090 --name configuration-service configuration-service
         '''
         // Wait for Nexus container to be up and healthy
        // script {
        //     def nexusContainerUp = false
        //     timeout(time: 5, unit: 'MINUTES') {
        //       retry(5) {
        //         try {
        //             def proc = bat(returnStatus: true, script: 'docker inspect --format "{{.State.Health.Status}}" nexus')
        //             def exitCode = proc.exitStatus
        //              if (exitCode == 0) {
        //               def healthStatus = proc.text.trim()
        //               echo "Health status of Nexus container: ${healthStatus}"
        //               if (healthStatus == 'healthy') {
        //                 nexusContainerUp = true
        //               } else {
        //                 error('Nexus container is not yet up and healthy.')
        //               }
        //             } else {
        //               error('Failed to retrieve health status of Nexus container.')
        //             }
        //         } catch (Exception e) {
        //           echo 'Nexus container is not yet up and healthy. Retrying in 10 seconds...'
        //           sleep 30
        //           error('Nexus container failed to start within the timeout period.')
        //         }
        //       }
        //     }
        //   }


       }
     }

     stage('test') {
       steps {
         script {
           def modules = ['candidate-service', 'job-service', 'qualification-service', 'communication-service', 'user-service', 'api-gateway-service', 'registry-service']
           for (module in modules) {
             dir(module) {
               bat '''
                ./mvnw test
                '''
             }
           }
         }
         bat 'docker stop configuration-service'
         bat 'docker container rm configuration-service'
       }
     }
     stage('package') {
       steps {
         script {
           def modules = ['candidate-service', 'job-service', 'qualification-service', 'communication-service', 'user-service', 'api-gateway-service', 'registry-service']
           for (module in modules) {
             dir(module) {
               bat '''
               ./mvnw package -Dmaven.test.skip
               '''
             }
           }
         }
       }
     }
     stage('sonar') {
       steps {
         withSonarQubeEnv(credentialsId: 'sonarCreds', installationName: 'sonar') {
           bat 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.1.2184:sonar'
         }
       }
     }
     stage('nexus') {
       steps {
         script {
           def modules = ['candidate-service', 'job-service', 'qualification-service', 'communication-service', 'user-service', 'api-gateway-service', 'registry-service','configuration-service']
           for (module in modules) {
             dir(module) {
               moduleImage = docker.build module
               docker.withRegistry('http://' + registry, registryCredentials) {
                 moduleImage.push('latest')
               }
             }
           }
         }
       }
     }

     stage('run') {
       steps {
         powershell 'docker-compose up -d'
       }
     }

     stage('notify') {
       steps {
         echo 'Notify GitLab'
         updateGitlabCommitStatus name: 'build', state: 'pending'
         updateGitlabCommitStatus name: 'build', state: 'success'
       }
     }
   }
 }